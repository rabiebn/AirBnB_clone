#!/usr/bin/python3
"""
base_module Module defines:
    BaseModel Class.
"""

from datetime import datetime
from models import storage
from uuid import uuid4


class BaseModel():
    """
    BaseModel Class
    """

    def __init__(self, *args, **kwargs):
        """
        Initializing instances.

        Attributes:
        id (str)             : unique ID for instances generated by uuid4.
        created_at (datetime): Date&Time when an instance is created.
        updated_at (datetime): Date&Time when an instance is last modified.
        """

        self.id = str(uuid4())
        self.created_at = datetime.today()
        self.updated_at = datetime.today()
        if kwargs:
            for k, v in kwargs.items():
                if k == "__class__":
                    continue
                elif k == "updated_at" or k == "created_at":
                    self.__dict__[k] = datetime.strptime(
                        v, "%Y-%m-%dT%H:%M:%S.%f")
                else:
                    self.__dict__[k] = kwargs[k]
        else:
            storage.new(self)

    def __str__(self):
        """
        str
        """
        return "[{}] ({}) {}".format(
            self.__class__.__name__, self.id, self.__dict__)

    def save(self):
        """
        Updates the public instance attribute updated_at,
        with the current datetime.
        """
        self.updated_at = datetime.today()
        storage.save()

    def to_dict(self):
        """
        Returns a dictionary containing all __dict__ keys/values
        of the instance.
        'created_at' and 'updated_at' are converted to string.
        """
        obj_dict = self.__dict__.copy()
        obj_dict["created_at"] = self.created_at.isoformat()
        obj_dict["updated_at"] = self.updated_at.isoformat()
        obj_dict["__class__"] = self.__class__.__name__
        return obj_dict
